import { useState } from 'react';
import { useDispatch } from 'react-redux';
import InputField from '../InputField/InputField';
import DateSelector from '../DateSelector/DateSelector';
import OptionSelector from '../OptionSelector/OptionSelector';
import StateSelector from '../StateSelector/StatesSelector';
import Button from '../Button/Button';
import Modal from '../Modal/Modal';
import { states } from '../StateSelector/USA_States_List/USA_States_List';
import { Employee } from '../../types/Employee';
import { addEmployee } from '../../store/employeeSlice';
import useEmployeeValidation from '../../utils/hooks/EmployeeValidation';
import style from './CreateForm.module.scss';


const initialEmployeeState: Employee = {
  firstName: '',
  lastName: '',
  dateOfBirth: '',
  startDate: '',
  street: '',
  city: '',
  state: '',
  zipCode: '',
  department: ''
};

const CreateForm: React.FC = () => {
  const dispatch = useDispatch();
  const [employee, setEmployee] = useState<Employee>(initialEmployeeState);
  const { errors, validateForm } = useEmployeeValidation(employee);
  const [showModal, setShowModal] = useState(false);

  // Update the state of the form field when the user types or selects a value
// "e" is expected to be an event generated by either an <input> or a <select> element
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setEmployee({ ...employee, [e.target.name]: e.target.value });
  };

   //e is an event generated by a form element.
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      dispatch(addEmployee(employee));
      setShowModal(true);
      setEmployee(initialEmployeeState); // Reset form fields
    }
  };

  return (
    <div className={style.createForm}>
      <form onSubmit={handleSubmit}>
        <div className={style.leftForm}>
          <InputField 
            label="First Name" 
            name="firstName" 
            value={employee.firstName} 
            onChange={handleChange} 
            error={errors.firstName} 
          />
          <InputField 
            label="Last Name" 
            name="lastName" 
            value={employee.lastName} 
            onChange={handleChange} 
            error={errors.lastName} 
          />
          <DateSelector 
            label="Date of Birth" 
            name="dateOfBirth" 
            value={employee.dateOfBirth} 
            onChange={handleChange} 
            error={errors.dateOfBirth} 
          />
          <DateSelector 
            label="Start Date" 
            name="startDate" 
            value={employee.startDate} 
            onChange={handleChange} 
            error={errors.startDate} 
          />
          <OptionSelector 
            label="Department" 
            name="department" 
            options={['Sales', 'Marketing', 'Engineering', 'Human Resources', 'Legal']} 
            value={employee.department} 
            onChange={handleChange} 
            error={errors.department} 
          />
        </div>
        <fieldset>
          <legend>Address</legend>
          <InputField 
            label="Street" 
            name="street" 
            value={employee.street} 
            onChange={handleChange} 
            error={errors.street} 
          />
          <InputField 
            label="City" 
            name="city" 
            value={employee.city} 
            onChange={handleChange} 
            error={errors.city} 
          />
          <StateSelector 
            label="State" 
            name="state" 
            options={states} 
            value={employee.state} 
            onChange={handleChange} 
            error={errors.state} 
          />
          <InputField 
            label="Zip Code" 
            name="zipCode" 
            value={employee.zipCode} 
            onChange={handleChange} 
            error={errors.zipCode} 
          />
        </fieldset>
        <div className={style.buttonContainer}>
          <Button onClick={(e) => { e.preventDefault(); handleSubmit(e); }}>Save New Employee</Button>
        </div>
      </form>
      {showModal && (
        <Modal onClose={() => setShowModal(false)}>
          <h2>Employee Created!</h2>
        </Modal>
      )}
    </div>
  );
};

export default CreateForm;
